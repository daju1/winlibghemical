diff -Nur ./libghemical-3.0.0.original/src/model.cpp ./libghemical-3.0.0/src/model.cpp
--- ./libghemical-3.0.0.original/src/model.cpp	2023-08-20 08:22:51.575997877 +0000
+++ ./libghemical-3.0.0/src/model.cpp	2023-08-20 12:14:47.560248111 +0000
@@ -45,6 +45,7 @@
 #include "tab_mm_tripos52.h"		// libghemical_init()
 
 #include "local_i18n.h"
+#include "float.h"
 #include "notice.h"
 
 #include <stdio.h>
@@ -5456,6 +5457,561 @@
 	dyn->SaveTrajectoryFrame(ofile, trajectory_version);
 }
 
+
+void * model::MoleculeCoordinatePlot(i32s molgrouptype, i32s ind_mol, i32s dim, i32s crd_type, i32s start_from, MolCrdHead fn_header, MolCrdVal fn_value, MolCrdValues fn_values, void * p)
+{
+	if (!this->GetTrajectoryFile())
+	{
+		this->ErrorMessage(_("Trajectory file does not opened?"));
+		return NULL;
+	}
+
+	const char * crd_names [][2] = {
+		{"coordinate", "nm"}, {"velocity", "1.0e+3 m/s"}, {"acceleration", "1.0e+12 m/s^2"}, {"force",""},
+		{"d_coordinate_error",""}, {"d_velocity_error",""}, {"sum_d_coordinate_error",""}, {"sum_d_velocity_error",""},
+		{"cumsum_velocity",""}, {"cumsum_acceleration",""}, {"cumsum_force",""},
+		{"gas_atom_went_down_out_from_membrane - gas_atom_went_up_into_memrane",""},
+		{"gas_atom_went_down_into_membrane - gas_atom_went_up_out_from_memrane",""},
+		{"gas_atom_went_down_out_from_membrane",""}, {"gas_atom_went_up_into_memrane",""}, {"gas_atom_went_down_into_membrane",""},
+		{"gas_atom_went_up_out_from_memrane",""}, {"coordinate_cumsum_velocity","nm"}, {"coordinate_cumsum_acceleration","nm"},
+		{"coordinate_cumsum_velocity_and_acceleration","nm"}, {"cumulative_mean_velocity","m/s"}
+		};
+	
+	size_t crd_names_len = 21;
+
+	void * plot = fn_header(p, molgrouptype, ind_mol, dim, crd_type, crd_names, crd_names_len);
+
+	float ekin;
+	float epot;
+
+	i32s shift = 0;
+	f64 first_coordinate = 0.0;
+	f64 previouse_coordinate = 0.0;
+	f64 sum_d_coordinate_error = 0.0;
+	f64 sum_coordinate = 0.0;
+	f64 sum_velocity = 0.0;
+	f64 previouse_velocity = 0.0;
+	f64 sum_d_velocity_error = 0.0;
+	f64 previouse_acceleration = 0.0;
+	f64 sum_acceleration = 0.0;
+	f64 sum_force = 0.0;
+	f64 coordinate_cumsum_velocity = 0.0;
+	f64 coordinate_cumsum_acceleration = 0.0;
+	f64 coordinate_cumsum_velocity_and_acceleration = 0.0;
+
+	std::list<struct molgroup> molgroups;
+	this->MakeMoleculesGroups(molgroups);
+
+	size_t natoms = atom_list.size();
+	std::vector<f64> c_data; c_data.resize(natoms * 3);
+	std::vector<f64> previouse_c_data; previouse_c_data.resize(natoms * 3, 0.0);
+	std::vector<f64> v_data; v_data.resize(natoms * 3);
+	std::vector<f64> previouse_v_data; previouse_v_data.resize(natoms * 3, 0.0);
+	std::vector<f64> a_data; a_data.resize(natoms * 3);
+	std::vector<f64> f_data; f_data.resize(natoms * 3);
+
+	std::vector<f64> cumsum_v_data; cumsum_v_data.resize(natoms * 3); std::vector<f64> cumsum_v_data_start_from; cumsum_v_data_start_from.resize(natoms * 3);
+	std::vector<f64> cumsum_a_data; cumsum_a_data.resize(natoms * 3); std::vector<f64> cumsum_a_data_start_from; cumsum_a_data_start_from.resize(natoms * 3);
+	std::vector<f64> cumsum_f_data; cumsum_f_data.resize(natoms * 3); std::vector<f64> cumsum_f_data_start_from; cumsum_f_data_start_from.resize(natoms * 3);
+
+	int64_t gas_atom_went_down_out_from_membrane = 0,
+			gas_atom_went_up_into_memrane = 0,
+			gas_atom_went_down_into_membrane = 0,
+			gas_atom_went_up_out_from_memrane = 0;
+
+	i32s max_frames = this->GetTotalFrames();
+	for (i32s loop = start_from; loop < max_frames; loop++)
+	{
+		this->SetCurrentFrame(loop);
+
+		size_t place = GetTrajectoryHeaderSize();					// skip the header...
+		place += GetTrajectoryFrameSize() * current_traj_frame;		// get the correct frame...
+		//place += GetTrajectoryEnergySize();						// skip epot and ekin...
+
+		trajfile->seekg(place, ios::beg);
+
+		trajfile->read((char *) & ekin, sizeof(ekin));
+		trajfile->read((char *) & epot, sizeof(epot));
+
+		float boundary[3];
+		if (trajectory_version > 10)
+		{
+			float tmp;
+			trajfile->read((char *) & tmp, sizeof(tmp)); boundary[0] = tmp;
+			trajfile->read((char *) & tmp, sizeof(tmp)); boundary[1] = tmp;
+			trajfile->read((char *) & tmp, sizeof(tmp)); boundary[2] = tmp;
+			if (loop  ==  max_frames - 1) {
+				printf("boundary %f %f %f\n", boundary[0], boundary[1], boundary[2]);
+			}
+		}
+
+		i32s ind = 0;
+
+		for (iter_al it1 = atom_list.begin(); it1 != atom_list.end(); it1++)
+		{
+			this->ReadTrajectoryFrameAtom(it1);
+
+			if (loop == start_from)
+			{
+				for (i32s t4 = 0;t4 < 3;t4++)
+				{
+					cumsum_v_data_start_from[3 * ind + t4] = this->traj_frame_cumsum_vdata[t4];
+					cumsum_a_data_start_from[3 * ind + t4] = this->traj_frame_cumsum_adata[t4];
+					cumsum_f_data_start_from[3 * ind + t4] = this->traj_frame_cumsum_fdata[t4];
+				}
+			}
+
+			for (i32s t4 = 0;t4 < 3;t4++)
+			{
+				c_data[3 * ind + t4] = this->traj_frame_cdata[t4];
+				v_data[3 * ind + t4] = this->traj_frame_vdata[t4];
+				a_data[3 * ind + t4] = this->traj_frame_adata[t4];
+				f_data[3 * ind + t4] = this->traj_frame_fdata[t4];
+
+				cumsum_v_data[3 * ind + t4] = this->traj_frame_cumsum_vdata[t4] - cumsum_v_data_start_from[3 * ind + t4];
+				cumsum_a_data[3 * ind + t4] = this->traj_frame_cumsum_adata[t4] - cumsum_a_data_start_from[3 * ind + t4];
+				cumsum_f_data[3 * ind + t4] = this->traj_frame_cumsum_fdata[t4] - cumsum_f_data_start_from[3 * ind + t4];
+			}
+
+			ind++;
+		}
+
+		f64 coordinate = 0;
+		f64 velocity = 0;
+		f64 acceleration = 0;
+		f64 force = 0;
+
+		f64 cumsum_velocity = 0;
+		f64 cumsum_acceleration = 0;
+		f64 cumsum_force = 0;
+
+		f64 max_membrane_crd = -FLT_MAX, min_membrane_crd = FLT_MAX;
+		bool is_membrane_cutted_by_boundary = false;
+
+		i32s indmol=0;
+		for (std::list<molgroup>::iterator it_mlgr = molgroups.begin();
+			it_mlgr != molgroups.end(); ++it_mlgr)
+		{
+			if (molgrouptype != it_mlgr->molgrouptype)
+			{
+				continue;
+			}
+
+			if (ind_mol != indmol)
+			{
+				indmol++;
+				continue;
+			}
+
+			f64 crd, vel, acc, frc,
+				cumsum_vel, cumsum_acc, cumsum_frc,
+				max_crd = -FLT_MAX, min_crd = FLT_MAX,
+				sum_crd = 0.0, sum_vel = 0.0, sum_acc = 0.0, sum_frc = 0.0,
+				sum_cumsum_vel = 0.0, sum_cumsum_acc = 0.0, sum_cumsum_frc = 0.0,
+				pre_atom_crd = 0.0, pre_loop_vel = 0.0,
+				pre_loop_crd = 0.0;
+
+			bool is_cutted_by_boundary = false;
+
+			for (std::list<i32s>::iterator it = it_mlgr->natoms.begin();
+				it != it_mlgr->natoms.end(); ++it)
+			{
+				ind = *it;
+				crd = c_data[3 * ind + dim];
+				vel = v_data[3 * ind + dim];
+				acc = a_data[3 * ind + dim];
+				frc = f_data[3 * ind + dim];
+				cumsum_vel = cumsum_v_data[3 * ind + dim];
+				cumsum_acc = cumsum_a_data[3 * ind + dim];
+				cumsum_frc = cumsum_f_data[3 * ind + dim];
+				pre_loop_crd = previouse_c_data[3 * ind + dim];
+				pre_loop_vel = previouse_v_data[3 * ind + dim];
+
+				//if (0 == crd_type)
+				{
+					//this->apply_periodic_cond(eng, test2);
+					if (crd - pre_atom_crd > boundary[dim])
+					{
+						crd -= 2 * boundary[dim];
+						is_cutted_by_boundary = true;
+					}
+					if (crd - pre_atom_crd < -boundary[dim])
+					{
+						crd += 2 * boundary[dim];
+						is_cutted_by_boundary = true;
+					}
+				}
+
+				if (max_crd < crd) {
+					max_crd = crd;
+				}
+
+				if (min_crd > crd) {
+					min_crd = crd;
+				}
+
+				sum_crd += crd;
+				pre_atom_crd = crd;
+
+				sum_vel += vel;
+
+				sum_acc += acc;
+				sum_frc += frc;
+
+				sum_cumsum_vel += cumsum_vel;
+				sum_cumsum_acc += cumsum_acc;
+				sum_cumsum_frc += cumsum_frc;
+			}
+
+			//if (crd_type < 3) // crd, vel and acc, but not force
+			sum_crd /= it_mlgr->natoms.size();
+			sum_vel /= it_mlgr->natoms.size();
+			sum_acc /= it_mlgr->natoms.size();
+
+			sum_cumsum_vel /= it_mlgr->natoms.size();
+			sum_cumsum_acc /= it_mlgr->natoms.size();
+
+			coordinate   = sum_crd;
+			velocity     = sum_vel;
+			acceleration = sum_acc;
+			force        = sum_frc;
+
+			cumsum_velocity     = sum_cumsum_vel;
+			cumsum_acceleration = sum_cumsum_acc;
+			cumsum_force        = sum_cumsum_frc;
+
+			if (MEMBRANE_OR_GLOBULE == it_mlgr->molgrouptype)
+			{
+				max_membrane_crd = max_crd, min_membrane_crd = min_crd;
+				is_membrane_cutted_by_boundary = is_cutted_by_boundary;
+			}
+
+			indmol++;
+		}
+
+
+		for (std::list<molgroup>::iterator it_mlgr = molgroups.begin();
+			it_mlgr != molgroups.end(); ++it_mlgr)
+		{
+			if (GAS != it_mlgr->molgrouptype)
+			{
+				continue;
+			}
+
+			f64 crd, pre_loop_crd = 0.0;;
+
+			for (std::list<i32s>::iterator it = it_mlgr->natoms.begin();
+				it != it_mlgr->natoms.end(); ++it)
+			{
+				ind = *it;
+				crd = c_data[3 * ind + dim];
+				pre_loop_crd = previouse_c_data[3 * ind + dim];
+
+				if (loop > start_from)
+				{
+					if (is_membrane_cutted_by_boundary)
+					{
+						if (min_membrane_crd < -boundary[dim])
+						{
+							if (crd <= min_membrane_crd + 2 * boundary[dim] && pre_loop_crd > min_membrane_crd + 2 * boundary[dim])
+							{
+								gas_atom_went_down_out_from_membrane++;
+							}
+							if (crd >= min_membrane_crd + 2 * boundary[dim] && pre_loop_crd < min_membrane_crd + 2 * boundary[dim])
+							{
+								gas_atom_went_up_into_memrane++;
+							}
+
+							if (crd <= max_membrane_crd && pre_loop_crd > max_membrane_crd)
+							{
+								gas_atom_went_down_into_membrane++;
+							}
+							if (crd >= max_membrane_crd && pre_loop_crd < max_membrane_crd)
+							{
+								gas_atom_went_up_out_from_memrane++;
+							}
+						}
+
+						if (max_membrane_crd > boundary[dim])
+						{
+							if (crd <= min_membrane_crd && pre_loop_crd > min_membrane_crd)
+							{
+								gas_atom_went_down_out_from_membrane++;
+							}
+							if (crd >= min_membrane_crd && pre_loop_crd < min_membrane_crd)
+							{
+								gas_atom_went_up_into_memrane++;
+							}
+
+							if (crd <= max_membrane_crd - 2 * boundary[dim]&& pre_loop_crd > max_membrane_crd - 2 * boundary[dim])
+							{
+								gas_atom_went_down_into_membrane++;
+							}
+							if (crd >= max_membrane_crd - 2 * boundary[dim] && pre_loop_crd < max_membrane_crd - 2 * boundary[dim])
+							{
+								gas_atom_went_up_out_from_memrane++;
+							}
+						}
+					}
+					else
+					{
+						if (crd <= min_membrane_crd && pre_loop_crd > min_membrane_crd)
+						{
+							gas_atom_went_down_out_from_membrane++;
+						}
+						if (crd >= min_membrane_crd && pre_loop_crd < min_membrane_crd)
+						{
+							gas_atom_went_up_into_memrane++;
+						}
+
+						if (crd <= max_membrane_crd && pre_loop_crd > max_membrane_crd)
+						{
+							gas_atom_went_down_into_membrane++;
+						}
+						if (crd >= max_membrane_crd && pre_loop_crd < max_membrane_crd)
+						{
+							gas_atom_went_up_out_from_memrane++;
+						}
+					}
+				}
+			}
+
+			//
+		}
+
+		//if (0 == crd_type)
+		{
+			if (coordinate - previouse_coordinate > boundary[dim])
+			{
+				shift -= 1;
+				if (loop  ==  max_frames - 1) printf("coordinate %e - previouse_coordinate %e > boundary[dim] %e shift %d\n", coordinate, previouse_coordinate, boundary[dim], shift);
+			}
+			if (coordinate - previouse_coordinate < -boundary[dim])
+			{
+				shift += 1;
+				if (loop  ==  max_frames - 1) printf("coordinate %e - previouse_coordinate %f < boundary[dim] %e shift %d\n", coordinate, previouse_coordinate, boundary[dim], shift);
+			}
+			sum_coordinate = (coordinate + 2 * shift * boundary[dim]) - first_coordinate;
+		}
+		//else
+		{
+			sum_velocity     += velocity;
+			sum_acceleration += acceleration;
+			sum_force        += force;
+		}
+
+		/*
+		f64 tstep1;		// timestep [fs] // [1.0e-15 s]
+		f64 tstep2;		// timestep ^ 2	 // [1.0e-30 s^2]		
+
+		f64 tmpA = acc[n1 * 3 + n2];
+		f64 tmp1 = tstep1 * vel[n1 * 3 + n2] * 1.0e-3;
+		f64 tmp2 = tstep2 * tmpA * 0.5e-9;
+
+		if (!locked[n1])
+		{
+			eng->crd[n1 * 3 + n2] += tmp1 + tmp2;
+			vel[n1 * 3 + n2] += tstep1 * tmpA * 0.5e-6;
+		}
+
+		vel[n1 * 3 + 0] += tstep1 * acc[n1 * 3 + 0] * 0.5e-6;
+		vel[n1 * 3 + 1] += tstep1 * acc[n1 * 3 + 1] * 0.5e-6;
+		vel[n1 * 3 + 2] += tstep1 * acc[n1 * 3 + 2] * 0.5e-6;
+		*/
+
+		f64 tstep1 = /*0.5*/traj_tstep1, tstep2 = tstep1 * tstep1;
+		f64 the_trajectory_current_time_ns = loop > start_from + 1 ? time_step_between_traj_records * (loop - start_from - 1) / 1000000 : time_step_between_traj_records / 1000000;
+
+		f64 dcv    = tstep1 * previouse_velocity * 1.0e-3;
+		f64 dca    = tstep2 * previouse_acceleration * 0.5e-9;
+		f64 dc     = dcv + dca;
+
+		coordinate_cumsum_velocity                  = tstep1 * cumsum_velocity * 1.0e-3;
+		coordinate_cumsum_acceleration              = tstep2 * cumsum_acceleration * 0.5e-9;
+		coordinate_cumsum_velocity_and_acceleration = coordinate_cumsum_velocity + coordinate_cumsum_acceleration;
+
+		f64 dv1 = tstep1 * previouse_acceleration * 0.5e-6;
+		f64 dv2 = tstep1 * acceleration * 0.5e-6;
+		f64 dv  = dv1 + dv2;
+
+		f64 d_coordinate = coordinate - previouse_coordinate;
+		f64 d_velocity   = velocity   - previouse_velocity;
+
+		f64 d_coordinate_error = d_coordinate - dc;
+		f64 d_velocity_error   = d_velocity   - dv;
+
+		sum_d_coordinate_error += d_coordinate_error;
+		sum_d_velocity_error   += d_velocity_error;
+
+		if (loop  ==  max_frames - 1) {
+			printf("loop %d dc %0.06e = %0.06e (%0.06e + %0.06e) error=%0.06e %0.06e\n", loop
+				, d_coordinate
+				, dc
+				, dcv, dca
+				, d_coordinate_error
+				, d_velocity_error
+				);
+		}
+
+		std::list<f64> values;
+
+		for (i32s i_crd_type = 0; i_crd_type < crd_names_len; ++i_crd_type)
+		{
+
+			f64 value = 0.0;
+			switch (i_crd_type)
+			{
+			case 0:
+				value = coordinate + 2 * shift * boundary[dim];
+				break;
+			case 1:
+				value = velocity;
+				break;
+			case 2:
+				value = acceleration;
+				break;
+			case 3:
+				value = force;
+				break;
+			case 4:
+				value = d_coordinate_error;
+				break;
+			case 5:
+				value = d_velocity_error;
+				break;
+			case 6:
+				value = sum_d_coordinate_error;
+				break;
+			case 7:
+				value = sum_d_velocity_error;
+				break;
+			case 8:
+				value = cumsum_velocity;
+				break;
+			case 9:
+				value = cumsum_acceleration;
+				break;
+			case 10:
+				value = cumsum_force;
+				break;
+			case 11:
+				value = gas_atom_went_down_out_from_membrane - gas_atom_went_up_into_memrane;
+				break;
+			case 12:
+				value = gas_atom_went_down_into_membrane - gas_atom_went_up_out_from_memrane;
+				break;
+
+			case 13:
+				value = gas_atom_went_down_out_from_membrane;
+				break;
+			case 14:
+				value = gas_atom_went_up_into_memrane;
+				break;
+			case 15:
+				value = gas_atom_went_down_into_membrane;
+				break;
+			case 16:
+				value = gas_atom_went_up_out_from_memrane;
+				break;
+
+			case 17:
+				value = coordinate_cumsum_velocity;
+				break;
+			case 18:
+				value = coordinate_cumsum_acceleration;
+				break;
+			case 19:
+				value = coordinate_cumsum_velocity_and_acceleration;
+				break;
+			case 20:
+				value = coordinate_cumsum_velocity_and_acceleration / the_trajectory_current_time_ns;
+				break;
+
+			default:
+				break;
+			}
+
+			if (i_crd_type == crd_type)
+			{
+				fn_value(plot, loop - start_from, value);
+			}
+
+			values.push_back(value);
+		}
+
+		if (fn_values)
+		{
+			fn_values(p, loop - start_from, values);
+		}
+
+		previouse_coordinate   = coordinate;
+		previouse_velocity     = velocity;
+		previouse_acceleration = acceleration;
+
+		if (start_from == loop)
+		{
+			first_coordinate = coordinate;
+		}
+
+		for (i32s t4 = 0; t4 < natoms * 3; t4++)
+		{
+			previouse_c_data[t4] = c_data[t4];
+			previouse_v_data[t4] = v_data[t4];
+		}
+	}
+
+	f64 mean_coordinate   = sum_coordinate   / max_frames;
+	f64 mean_velocity     = sum_velocity     / max_frames;
+	f64 mean_acceleration = sum_acceleration / max_frames;
+	f64 mean_force        = sum_force        / max_frames;
+
+	f64 mean_coordinate_per_time = mean_coordinate / this->time_step_between_traj_records;
+
+	f64 mean_d_coordinate_error = sum_d_coordinate_error / max_frames;
+	f64 mean_d_velocity_error   = sum_d_velocity_error   / max_frames;
+
+	// the trajectory common time (1.0E-9 s)
+	f64 the_trajectory_common_time_ns = time_step_between_traj_records * (total_traj_frames - 1) / 1000000;
+
+	printf("sum_d_coordinate_error / sum_coordinate %f\n", sum_d_coordinate_error / sum_coordinate);
+	printf("sum_coordinate - sum_d_coordinate_error %f\n", sum_coordinate - sum_d_coordinate_error);
+
+	printf("sum_coordinate  %f (nm)\n",  sum_coordinate);
+	printf("coordinate_cumsum_velocity                    %f (nm)\n", coordinate_cumsum_velocity);
+	printf("coordinate_cumsum_acceleration                %f (nm)\n", coordinate_cumsum_acceleration);
+	printf("coordinate_cumsum_velocity_and_acceleration   %f (nm)\n", coordinate_cumsum_velocity_and_acceleration);
+	printf("crd_per_time_cumsum_velocity_and_acceleration %f (m/s)\n", coordinate_cumsum_velocity_and_acceleration / the_trajectory_common_time_ns);
+	printf("mean_coordinate %e (nm/frame)\n", mean_coordinate);
+
+	printf("sum_d_coordinate_error  %f \n",  sum_d_coordinate_error);
+	printf("mean_d_coordinate_error %e\n", mean_d_coordinate_error);
+
+	printf("sum_velocity  %f\n",  sum_velocity);
+	printf("mean_velocity %e [1.0e+3 m/s]\n", mean_velocity);
+	printf("mean_coordinate_per_time %e [nm/fs]\n", mean_coordinate_per_time);
+
+	printf("sum_d_velocity_error  %f\n",  sum_d_velocity_error);
+	printf("mean_d_velocity_error %e\n", mean_d_velocity_error);
+
+	printf("sum_acceleration  %f\n",  sum_acceleration);
+	printf("mean_acceleration %f\n", mean_acceleration);
+
+	printf("sum_force %f\n",  sum_force);
+	printf("mean_force %f\n", mean_force);
+
+	printf("gas_atom_went_down_out_from_membrane %ld\n", gas_atom_went_down_out_from_membrane);
+	printf("gas_atom_went_up_into_memrane %ld\n", gas_atom_went_up_into_memrane);
+	printf("gas_atom_went_down_into_membrane %ld\n" , gas_atom_went_down_into_membrane);
+	printf("gas_atom_went_up_out_from_memrane %ld\n", gas_atom_went_up_out_from_memrane);
+
+	//printf("sum_%s %f\n",  crd_name[crd_type], sum_coordinate);
+	//printf("mean_%s %f\n", crd_name[crd_type], mean_coordinate);
+
+	return plot;
+}
+
+
+
 void model::EvaluateBFact(void)
 {
 	if (!trajfile)
diff -Nur ./libghemical-3.0.0.original/src/model.h ./libghemical-3.0.0/src/model.h
--- ./libghemical-3.0.0.original/src/model.h	2023-08-20 08:22:51.571997877 +0000
+++ ./libghemical-3.0.0/src/model.h	2023-08-20 11:52:43.128253163 +0000
@@ -68,6 +68,11 @@
 
 /*################################################################################################*/
 
+
+typedef void* (*MolCrdHead)  (void * p, i32s molgrouptype, i32s ind_mol, i32s dim, i32s crd_type, const char * crd_names [][2], size_t crd_names_len);
+typedef void  (*MolCrdVal)   (void * p, i32s loop, f64 value);
+typedef void  (*MolCrdValues)(void * p, i32s loop, std::list<f64> & values);
+
 /// The model class contains information about all atoms and bonds in a model.
 
 class model
@@ -458,6 +463,7 @@
 
 	i32s GetTotalFrames(void);
 	long_ifstream * GetTrajectoryFile(void);
+	const char * GetTrajectoryFileName(void) {return traj_filename.c_str();}
 	
 	i32s GetCurrentFrame(void);
 	void SetCurrentFrame(i32s);
@@ -466,6 +472,8 @@
 	void SetTrajectoryFrameSaveFrq(int frq);
 	void WriteTrajectoryHeader(long_ofstream &, int, moldyn *, int);
 	void WriteTrajectoryFrame(long_ofstream &, moldyn *);
+
+	void* MoleculeCoordinatePlot(i32s molgrouptype, i32s ind_mol, i32s dim, i32s crd_type, i32s start_from, MolCrdHead fn1, MolCrdVal fn2, MolCrdValues fn3, void * prj);
 	
 	void EvaluateBFact(void);
 	void EvaluateDiffConst(double);
diff -Nur ./ghemical-3.0.0.original/src/project.cpp ./ghemical-3.0.0/src/project.cpp
--- ./ghemical-3.0.0.original/src/project.cpp	2023-08-20 08:22:51.567997877 +0000
+++ ./ghemical-3.0.0/src/project.cpp	2023-08-20 12:15:19.944247988 +0000
@@ -3828,535 +3828,31 @@
 	Message(str.str().c_str());
 }
 
-void project::TrajView_MoleculeCoordinatePlot(enum molgrouptype molgrouptype, i32s ind_mol, i32s dim, i32s crd_type, i32s start_from)
+void * MolCrdPlotHeader(void * p, i32s molgrouptype, i32s ind_mol, i32s dim, i32s crd_type, const char * crd_names [][2], size_t crd_names_len)
 {
-	if (!this->GetTrajectoryFile())
-	{
-		this->ErrorMessage(_("Trajectory file does not opened?"));
-		return;
-	}
-
-	const char * crd_name [] = {
-		"coordinate", "velocity", "acceleration", "force",
-		"d_coordinate_error", "d_velocity_error", "sum_d_coordinate_error", "sum_d_velocity_error",
-		"cumsum_velocity", "cumsum_acceleration", "cumsum_force",
-		"gas_atom_went_down_out_from_membrane - gas_atom_went_up_into_memrane",
-		"gas_atom_went_down_into_membrane - gas_atom_went_up_out_from_memrane",
-		"gas_atom_went_down_out_from_membrane", "gas_atom_went_up_into_memrane", "gas_atom_went_down_into_membrane",
-		"gas_atom_went_up_out_from_memrane", "coordinate_cumsum_velocity", "coordinate_cumsum_acceleration",
-		"coordinate_cumsum_velocity_and_acceleration", "coordinate_cumsum_velocity_and_acceleration / the_trajectory_current_time_ns"
-		};
-
-	const char * s1 = "frame(num)"; const char * sv = "distance (nm)";
-	p1dview_wcl * plot = AddPlot1DClient(s1, sv, true);
-	std::string title = std::string(GAS == molgrouptype ? "Gas_" : "Membrane_") + std::string(crd_type < 20 ? crd_name[crd_type] : "coordinate") + std::string("plot of ") + traj_filename;
+	project * prj = (project *) p;
+	const char * s1 = "frame(num)";
+	if (crd_type >= crd_names_len) crd_type = 0;
+	std::string sv = std::string(crd_names[crd_type][0]) + (strlen(crd_names[crd_type][1]) > 0 ? std::string("(") + std::string(crd_names[crd_type][1]) + std::string(")") : std::string(""));
+	p1dview_wcl * plot = prj->AddPlot1DClient(s1, sv.c_str(), true);
+	std::string title = std::string(GAS == molgrouptype ? "Gas_" : "Membrane_") + std::string(crd_type < crd_names_len ? crd_names[crd_type][0] : "coordinate") + std::string(" plot of ") + prj->GetTrajectoryFileName();
 	plot->SetTitle(title.c_str());
+	return plot;
+}
 
-	float ekin;
-	float epot;
-
-	i32s shift = 0;
-	f64 first_coordinate = 0.0;
-	f64 previouse_coordinate = 0.0;
-	f64 sum_d_coordinate_error = 0.0;
-	f64 sum_coordinate = 0.0;
-	f64 sum_velocity = 0.0;
-	f64 previouse_velocity = 0.0;
-	f64 sum_d_velocity_error = 0.0;
-	f64 previouse_acceleration = 0.0;
-	f64 sum_acceleration = 0.0;
-	f64 sum_force = 0.0;
-	f64 coordinate_cumsum_velocity = 0.0;
-	f64 coordinate_cumsum_acceleration = 0.0;
-	f64 coordinate_cumsum_velocity_and_acceleration = 0.0;
-
-	std::list<struct molgroup> molgroups;
-	this->MakeMoleculesGroups(molgroups);
-
-	size_t natoms = atom_list.size();
-	std::vector<f64> c_data; c_data.resize(natoms * 3);
-	std::vector<f64> previouse_c_data; previouse_c_data.resize(natoms * 3, 0.0);
-	std::vector<f64> v_data; v_data.resize(natoms * 3);
-	std::vector<f64> previouse_v_data; previouse_v_data.resize(natoms * 3, 0.0);
-	std::vector<f64> a_data; a_data.resize(natoms * 3);
-	std::vector<f64> f_data; f_data.resize(natoms * 3);
-
-	std::vector<f64> cumsum_v_data; cumsum_v_data.resize(natoms * 3);
-	std::vector<f64> cumsum_a_data; cumsum_a_data.resize(natoms * 3);
-	std::vector<f64> cumsum_f_data; cumsum_f_data.resize(natoms * 3);
-
-	int64_t gas_atom_went_down_out_from_membrane = 0,
-			gas_atom_went_up_into_memrane = 0,
-			gas_atom_went_down_into_membrane = 0,
-			gas_atom_went_up_out_from_memrane = 0;
-
-	i32s max_frames = this->GetTotalFrames();
-	for (i32s loop = 0; loop < max_frames; loop++)
-	{
-		this->SetCurrentFrame(loop);
-
-		size_t place = GetTrajectoryHeaderSize();						// skip the header...
-		place += GetTrajectoryFrameSize() * current_traj_frame;		// get the correct frame...
-		//place += GetTrajectoryEnergySize();							// skip epot and ekin...
-
-		trajfile->seekg(place, ios::beg);
-
-		trajfile->read((char *) & ekin, sizeof(ekin));
-		trajfile->read((char *) & epot, sizeof(epot));
-
-		float boundary[3];
-		if (trajectory_version > 10)
-		{
-			float tmp;
-			trajfile->read((char *) & tmp, sizeof(tmp)); boundary[0] = tmp;
-			trajfile->read((char *) & tmp, sizeof(tmp)); boundary[1] = tmp;
-			trajfile->read((char *) & tmp, sizeof(tmp)); boundary[2] = tmp;
-			if (loop  ==  max_frames - 1) {
-				printf("boundary %f %f %f\n", boundary[0], boundary[1], boundary[2]);
-			}
-		}
-
-		i32s ind = 0;
-		mt_a1 = mt_a2 = mt_a3 = NULL;
-
-		for (iter_al it1 = atom_list.begin(); it1 != atom_list.end(); it1++)
-		{
-			this->ReadTrajectoryFrameAtom(it1);
-
-			for (i32s t4 = 0;t4 < 3;t4++)
-			{
-				c_data[3 * ind + t4] = this->traj_frame_cdata[t4];
-				v_data[3 * ind + t4] = this->traj_frame_vdata[t4];
-				a_data[3 * ind + t4] = this->traj_frame_adata[t4];
-				f_data[3 * ind + t4] = this->traj_frame_fdata[t4];
-
-				cumsum_v_data[3 * ind + t4] = this->traj_frame_cumsum_vdata[t4];
-				cumsum_a_data[3 * ind + t4] = this->traj_frame_cumsum_adata[t4];
-				cumsum_f_data[3 * ind + t4] = this->traj_frame_cumsum_fdata[t4];
-			}
-
-			ind++;
-		}
-
-		f64 coordinate = 0;
-		f64 velocity = 0;
-		f64 acceleration = 0;
-		f64 force = 0;
-
-		f64 cumsum_velocity = 0;
-		f64 cumsum_acceleration = 0;
-		f64 cumsum_force = 0;
-
-		f64 max_membrane_crd = -FLT_MAX, min_membrane_crd = FLT_MAX;
-		bool is_membrane_cutted_by_boundary = false;
-
-		i32s indmol=0;
-		for (std::list<molgroup>::iterator it_mlgr = molgroups.begin();
-			it_mlgr != molgroups.end(); ++it_mlgr)
-		{
-			if (molgrouptype != it_mlgr->molgrouptype)
-			{
-				continue;
-			}
-
-			if (ind_mol != indmol)
-			{
-				indmol++;
-				continue;
-			}
-
-			f64 crd, vel, acc, frc,
-				cumsum_vel, cumsum_acc, cumsum_frc,
-				max_crd = -FLT_MAX, min_crd = FLT_MAX,
-				sum_crd = 0.0, sum_vel = 0.0, sum_acc = 0.0, sum_frc = 0.0, 
-				sum_cumsum_vel = 0.0, sum_cumsum_acc = 0.0, sum_cumsum_frc = 0.0, 
-				pre_atom_crd = 0.0, pre_loop_vel = 0.0,
-				pre_loop_crd = 0.0;
-
-			bool is_cutted_by_boundary = false;
-
-			for (std::list<i32s>::iterator it = it_mlgr->natoms.begin();
-				it != it_mlgr->natoms.end(); ++it)
-			{
-				ind = *it;
-				crd = c_data[3 * ind + dim];
-				vel = v_data[3 * ind + dim];
-				acc = a_data[3 * ind + dim];
-				frc = f_data[3 * ind + dim];
-				cumsum_vel = cumsum_v_data[3 * ind + dim];
-				cumsum_acc = cumsum_a_data[3 * ind + dim];
-				cumsum_frc = cumsum_f_data[3 * ind + dim];
-				pre_loop_crd = previouse_c_data[3 * ind + dim];
-				pre_loop_vel = previouse_v_data[3 * ind + dim];
-
-				//if (0 == crd_type)
-				{
-					//this->apply_periodic_cond(eng, test2);
-					if (crd - pre_atom_crd > boundary[dim])
-					{
-						crd -= 2 * boundary[dim];
-						is_cutted_by_boundary = true;
-					}
-					if (crd - pre_atom_crd < -boundary[dim])
-					{
-						crd += 2 * boundary[dim];
-						is_cutted_by_boundary = true;
-					}
-				}
-
-				if (max_crd < crd) {
-					max_crd = crd;
-				}
-
-				if (min_crd > crd) {
-					min_crd = crd;
-				}
-
-				sum_crd += crd;
-				pre_atom_crd = crd;
-
-				sum_vel += vel;
-
-				sum_acc += acc;
-				sum_frc += frc;
-
-				sum_cumsum_vel += cumsum_vel;
-				sum_cumsum_acc += cumsum_acc;
-				sum_cumsum_frc += cumsum_frc;
-			}
-
-			//if (crd_type < 3) // crd, vel and acc, but not force
-			sum_crd /= it_mlgr->natoms.size();
-			sum_vel /= it_mlgr->natoms.size();
-			sum_acc /= it_mlgr->natoms.size();
-
-			sum_cumsum_vel /= it_mlgr->natoms.size();
-			sum_cumsum_acc /= it_mlgr->natoms.size();
-
-			coordinate   = sum_crd;
-			velocity     = sum_vel;
-			acceleration = sum_acc;
-			force        = sum_frc;
-
-			cumsum_velocity     = sum_cumsum_vel;
-			cumsum_acceleration = sum_cumsum_acc;
-			cumsum_force        = sum_cumsum_frc;
-
-			if (MEMBRANE_OR_GLOBULE == it_mlgr->molgrouptype)
-			{
-				max_membrane_crd = max_crd, min_membrane_crd = min_crd;
-				is_membrane_cutted_by_boundary = is_cutted_by_boundary;
-			}
-
-			indmol++;
-		}
-
-
-		for (std::list<molgroup>::iterator it_mlgr = molgroups.begin();
-			it_mlgr != molgroups.end(); ++it_mlgr)
-		{
-			if (GAS != it_mlgr->molgrouptype)
-			{
-				continue;
-			}
-
-			f64 crd, pre_loop_crd = 0.0;;
-
-			for (std::list<i32s>::iterator it = it_mlgr->natoms.begin();
-				it != it_mlgr->natoms.end(); ++it)
-			{
-				ind = *it;
-				crd = c_data[3 * ind + dim];
-				pre_loop_crd = previouse_c_data[3 * ind + dim];
-
-				if (loop > 0)
-				{
-					if (is_membrane_cutted_by_boundary)
-					{
-						if (min_membrane_crd < -boundary[dim])
-						{
-							if (crd <= min_membrane_crd + 2 * boundary[dim] && pre_loop_crd > min_membrane_crd + 2 * boundary[dim])
-							{
-								gas_atom_went_down_out_from_membrane++;
-							}
-							if (crd >= min_membrane_crd + 2 * boundary[dim] && pre_loop_crd < min_membrane_crd + 2 * boundary[dim])
-							{
-								gas_atom_went_up_into_memrane++;
-							}
-
-							if (crd <= max_membrane_crd && pre_loop_crd > max_membrane_crd)
-							{
-								gas_atom_went_down_into_membrane++;
-							}
-							if (crd >= max_membrane_crd && pre_loop_crd < max_membrane_crd)
-							{
-								gas_atom_went_up_out_from_memrane++;
-							}
-						}
-
-						if (max_membrane_crd > boundary[dim])
-						{
-							if (crd <= min_membrane_crd && pre_loop_crd > min_membrane_crd)
-							{
-								gas_atom_went_down_out_from_membrane++;
-							}
-							if (crd >= min_membrane_crd && pre_loop_crd < min_membrane_crd)
-							{
-								gas_atom_went_up_into_memrane++;
-							}
-
-							if (crd <= max_membrane_crd - 2 * boundary[dim]&& pre_loop_crd > max_membrane_crd - 2 * boundary[dim])
-							{
-								gas_atom_went_down_into_membrane++;
-							}
-							if (crd >= max_membrane_crd - 2 * boundary[dim] && pre_loop_crd < max_membrane_crd - 2 * boundary[dim])
-							{
-								gas_atom_went_up_out_from_memrane++;
-							}
-						}
-					}
-					else
-					{
-						if (crd <= min_membrane_crd && pre_loop_crd > min_membrane_crd)
-						{
-							gas_atom_went_down_out_from_membrane++;
-						}
-						if (crd >= min_membrane_crd && pre_loop_crd < min_membrane_crd)
-						{
-							gas_atom_went_up_into_memrane++;
-						}
-
-						if (crd <= max_membrane_crd && pre_loop_crd > max_membrane_crd)
-						{
-							gas_atom_went_down_into_membrane++;
-						}
-						if (crd >= max_membrane_crd && pre_loop_crd < max_membrane_crd)
-						{
-							gas_atom_went_up_out_from_memrane++;
-						}
-					}
-				}
-			}
-
-			//
-		}
-
-		//if (0 == crd_type)
-		{
-			if (coordinate - previouse_coordinate > boundary[dim])
-			{
-				shift -= 1;
-				if (loop  ==  max_frames - 1) printf("coordinate %e - previouse_coordinate %e > boundary[dim] %e shift %d\n", coordinate, previouse_coordinate, boundary[dim], shift);
-			}
-			if (coordinate - previouse_coordinate < -boundary[dim])
-			{
-				shift += 1;
-				if (loop  ==  max_frames - 1) printf("coordinate %e - previouse_coordinate %f < boundary[dim] %e shift %d\n", coordinate, previouse_coordinate, boundary[dim], shift);
-			}
-			sum_coordinate = (coordinate + 2 * shift * boundary[dim]) - first_coordinate;
-		}
-		//else
-		{
-			sum_velocity     += velocity;
-			sum_acceleration += acceleration;
-			sum_force        += force;
-		}
-
-		/*
-		f64 tstep1;		// timestep [fs] // [1.0e-15 s]
-		f64 tstep2;		// timestep ^ 2	 // [1.0e-30 s^2]		
-
-		f64 tmpA = acc[n1 * 3 + n2];
-		f64 tmp1 = tstep1 * vel[n1 * 3 + n2] * 1.0e-3;
-		f64 tmp2 = tstep2 * tmpA * 0.5e-9;
-
-		if (!locked[n1])
-		{
-			eng->crd[n1 * 3 + n2] += tmp1 + tmp2;
-			vel[n1 * 3 + n2] += tstep1 * tmpA * 0.5e-6;
-		}
-
-		vel[n1 * 3 + 0] += tstep1 * acc[n1 * 3 + 0] * 0.5e-6;
-		vel[n1 * 3 + 1] += tstep1 * acc[n1 * 3 + 1] * 0.5e-6;
-		vel[n1 * 3 + 2] += tstep1 * acc[n1 * 3 + 2] * 0.5e-6;
-		*/
-
-		f64 tstep1 = /*0.5*/traj_tstep1, tstep2 = tstep1 * tstep1;
-		f64 the_trajectory_current_time_ns = loop > 1 ? time_step_between_traj_records * (loop - 1) / 1000000 : time_step_between_traj_records / 1000000;
-
-		f64 dcv    = tstep1 * previouse_velocity * 1.0e-3;
-		f64 dca    = tstep2 * previouse_acceleration * 0.5e-9;
-		f64 dc     = dcv + dca;
-
-		coordinate_cumsum_velocity                  = tstep1 * cumsum_velocity * 1.0e-3;
-		coordinate_cumsum_acceleration              = tstep2 * cumsum_acceleration * 0.5e-9;
-		coordinate_cumsum_velocity_and_acceleration = coordinate_cumsum_velocity + coordinate_cumsum_acceleration;
-
-		f64 dv1 = tstep1 * previouse_acceleration * 0.5e-6;
-		f64 dv2 = tstep1 * acceleration * 0.5e-6;
-		f64 dv  = dv1 + dv2;
-
-		f64 d_coordinate = coordinate - previouse_coordinate;
-		f64 d_velocity   = velocity   - previouse_velocity;
-
-		f64 d_coordinate_error = d_coordinate - dc;
-		f64 d_velocity_error   = d_velocity   - dv;
-
-		sum_d_coordinate_error += d_coordinate_error;
-		sum_d_velocity_error   += d_velocity_error;
-
-		if (loop  ==  max_frames - 1) {
-			printf("loop %d dc %0.06e = %0.06e (%0.06e + %0.06e) error=%0.06e %0.06e\n", loop
-				, d_coordinate
-				, dc
-				, dcv, dca
-				, d_coordinate_error
-				, d_velocity_error
-				);
-		}
-
-		f64 value = 0.0;
-		switch (crd_type)
-		{
-		case 0:
-			value = coordinate + 2 * shift * boundary[dim];
-			break;
-		case 1:
-			value = velocity;
-			break;
-		case 2:
-			value = acceleration;
-			break;
-		case 3:
-			value = force;
-			break;
-		case 4:
-			value = d_coordinate_error;
-			break;
-		case 5:
-			value = d_velocity_error;
-			break;
-		case 6:
-			value = sum_d_coordinate_error;
-			break;
-		case 7:
-			value = sum_d_velocity_error;
-			break;
-		case 8:
-			value = cumsum_velocity;
-			break;
-		case 9:
-			value = cumsum_acceleration;
-			break;
-		case 10:
-			value = cumsum_force;
-			break;
-		case 11:
-			value = gas_atom_went_down_out_from_membrane - gas_atom_went_up_into_memrane;
-			break;
-		case 12:
-			value = gas_atom_went_down_into_membrane - gas_atom_went_up_out_from_memrane;
-			break;
-
-		case 13:
-			value = gas_atom_went_down_out_from_membrane;
-			break;
-		case 14:
-			value = gas_atom_went_up_into_memrane;
-			break;
-		case 15:
-			value = gas_atom_went_down_into_membrane;
-			break;
-		case 16:
-			value = gas_atom_went_up_out_from_memrane;
-			break;
-
-		case 17:
-			value = coordinate_cumsum_velocity;
-			break;
-		case 18:
-			value = coordinate_cumsum_acceleration;
-			break;
-		case 19:
-			value = coordinate_cumsum_velocity_and_acceleration;
-			break;
-		case 20:
-			value = coordinate_cumsum_velocity_and_acceleration / the_trajectory_current_time_ns;
-			break;
-
-		default:
-			break;
-		}
-
-		plot->AddData(loop, value);
-
-		mt_a1 = mt_a2 = mt_a3 = NULL;
-
-		previouse_coordinate   = coordinate;
-		previouse_velocity     = velocity;
-		previouse_acceleration = acceleration;
-
-		if (0 == loop)
-		{
-			first_coordinate = coordinate;
-		}
+void MolCrdPlotValue(void * p, i32s loop, f64 value)
+{
+	p1dview_wcl * plot = (p1dview_wcl *) p;
+	plot->AddData(loop, value);
+}
 
-		for (i32s t4 = 0; t4 < natoms * 3; t4++)
-		{
-			previouse_c_data[t4] = c_data[t4];
-			previouse_v_data[t4] = v_data[t4];
-		}
+void project::TrajView_MoleculeCoordinatePlot(enum molgrouptype molgrouptype, i32s ind_mol, i32s dim, i32s crd_type, i32s start_from)
+{
+	p1dview_wcl * plot = (p1dview_wcl *) this->MoleculeCoordinatePlot(molgrouptype, ind_mol, dim, crd_type, start_from, MolCrdPlotHeader, MolCrdPlotValue, NULL, this);
+	if (plot) {
+		plot->Finalize();
+		plot->GetWnd()->RequestUpdate(false);
 	}
-
-	f64 mean_coordinate   = sum_coordinate   / max_frames;
-	f64 mean_velocity     = sum_velocity     / max_frames;
-	f64 mean_acceleration = sum_acceleration / max_frames;
-	f64 mean_force        = sum_force        / max_frames;
-
-	f64 mean_coordinate_per_time = mean_coordinate / this->time_step_between_traj_records;
-
-	f64 mean_d_coordinate_error = sum_d_coordinate_error / max_frames;
-	f64 mean_d_velocity_error   = sum_d_velocity_error   / max_frames;
-
-	// the trajectory common time (1.0E-9 s)
-	f64 the_trajectory_common_time_ns = time_step_between_traj_records * (total_traj_frames - 1) / 1000000;
-
-	printf("sum_d_coordinate_error / sum_coordinate %f\n", sum_d_coordinate_error / sum_coordinate);
-	printf("sum_coordinate - sum_d_coordinate_error %f\n", sum_coordinate - sum_d_coordinate_error);
-
-	printf("sum_coordinate  %f (nm)\n",  sum_coordinate);
-	printf("coordinate_cumsum_velocity                    %f (nm)\n", coordinate_cumsum_velocity);
-	printf("coordinate_cumsum_acceleration                %f (nm)\n", coordinate_cumsum_acceleration);
-	printf("coordinate_cumsum_velocity_and_acceleration   %f (nm)\n", coordinate_cumsum_velocity_and_acceleration);
-	printf("crd_per_time_cumsum_velocity_and_acceleration %f (m/s)\n", coordinate_cumsum_velocity_and_acceleration / the_trajectory_common_time_ns);
-	printf("mean_coordinate %e (nm/frame)\n", mean_coordinate);
-
-	printf("sum_d_coordinate_error  %f \n",  sum_d_coordinate_error);
-	printf("mean_d_coordinate_error %e\n", mean_d_coordinate_error);
-
-	printf("sum_velocity  %f\n",  sum_velocity);
-	printf("mean_velocity %e [1.0e+3 m/s]\n", mean_velocity);
-	printf("mean_coordinate_per_time %e [nm/fs]\n", mean_coordinate_per_time);
-
-	printf("sum_d_velocity_error  %f\n",  sum_d_velocity_error);
-	printf("mean_d_velocity_error %e\n", mean_d_velocity_error);
-
-	printf("sum_acceleration  %f\n",  sum_acceleration);
-	printf("mean_acceleration %f\n", mean_acceleration);
-
-	printf("sum_force %f\n",  sum_force);
-	printf("mean_force %f\n", mean_force);
-
-	printf("gas_atom_went_down_out_from_membrane %ld\n", gas_atom_went_down_out_from_membrane);
-	printf("gas_atom_went_up_into_memrane %ld\n", gas_atom_went_up_into_memrane);
-	printf("gas_atom_went_down_into_membrane %ld\n" , gas_atom_went_down_into_membrane);
-	printf("gas_atom_went_up_out_from_memrane %ld\n", gas_atom_went_up_out_from_memrane);
-
-	//printf("sum_%s %f\n",  crd_name[crd_type], sum_coordinate);
-	//printf("mean_%s %f\n", crd_name[crd_type], mean_coordinate);
-
-	plot->Finalize();
-	plot->GetWnd()->RequestUpdate(false);
 }
 
 void project::TrajView_CoordinatePlot(i32s inda, i32s dim)
