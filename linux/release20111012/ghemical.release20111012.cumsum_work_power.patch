diff -Nur ./libghemical-3.0.0.original/src/model.cpp ./libghemical-3.0.0/src/model.cpp
--- ./libghemical-3.0.0.original/src/model.cpp	2023-08-23 18:36:26.491507277 +0000
+++ ./libghemical-3.0.0/src/model.cpp	2023-08-23 20:24:05.659482637 +0000
@@ -5504,16 +5504,23 @@
 		{"gas_atom_went_down_into_membrane - gas_atom_went_up_out_from_memrane",""},
 		{"gas_atom_went_down_out_from_membrane",""}, {"gas_atom_went_up_into_memrane",""}, {"gas_atom_went_down_into_membrane",""},
 		{"gas_atom_went_up_out_from_memrane",""}, {"coordinate_cumsum_velocity","nm"}, {"coordinate_cumsum_acceleration","nm"},
-		{"coordinate_cumsum_velocity_and_acceleration","nm"}, {"cumulative_mean_velocity","m/s"}
+		{"coordinate_cumsum_velocity_and_acceleration","nm"}, {"cumulative_mean_velocity","m/s"},
+		{"power", ""}
 		};
 	
-	size_t crd_names_len = 22;
+	size_t crd_names_len = 23;
 
 	void * plot = fn_header(p, molgrouptype, ind_mol, dim, crd_type, crd_names, crd_names_len);
 
 	float ekin;
 	float epot;
 
+	const f64 N_Avogadro = 6.02214076 * 1.0e+23;
+	const f64 F_ed_izm_Newton_per_mol = 1.0e+12;
+	const f64 F_ed_izm_Newton_per_atom = F_ed_izm_Newton_per_mol/N_Avogadro;
+	const f64 cumsum_work_ed_izm_Joule = F_ed_izm_Newton_per_atom * 1.0e-9;
+	const f64 power_ed_izm_Watt = cumsum_work_ed_izm_Joule * 1.0e+15;
+
 	i32s shift = 0;
 	f64 first_coordinate = 0.0;
 	f64 previouse_coordinate = 0.0;
@@ -5528,6 +5535,7 @@
 	f64 coordinate_cumsum_velocity = 0.0;
 	f64 coordinate_cumsum_acceleration = 0.0;
 	f64 coordinate_cumsum_velocity_and_acceleration = 0.0;
+	f64 previouse_cumsum_work = 0.0;
 
 	std::list<struct molgroup> molgroups;
 	this->MakeMoleculesGroups(molgroups);
@@ -5869,7 +5877,21 @@
 		sum_d_coordinate_error += d_coordinate_error;
 		sum_d_velocity_error   += d_velocity_error;
 
+		f64 power = (cumsum_work - previouse_cumsum_work) / this->time_step_between_traj_records;
+		f64 power_Watt = power_ed_izm_Watt * power;
+		f64 s_of_membrane_nm2 = 1.0;
+		for (i32s t4 = 0; t4 < 3; t4++)
+		{
+			if (t4 != dim)
+			{
+				s_of_membrane_nm2 *= 2 * boundary[t4];
+			}
+		}
+		f64 s_of_membrane_sm2 = s_of_membrane_nm2 * 1.0e-14;
+		f64 power_Watt_per_sm2 = power_Watt / s_of_membrane_sm2;
+
 		if (loop  ==  max_frames - 1) {
+			printf("loop %d power %f power_Watt %e power_Watt_per_sm^2 %e\n", loop, power, power_Watt, power_Watt_per_sm2);
 			printf("loop %d dc %0.06e = %0.06e (%0.06e + %0.06e) error=%0.06e %0.06e\n", loop
 				, d_coordinate
 				, dc
@@ -5955,6 +5977,9 @@
 			case 21:
 				value = coordinate_cumsum_velocity_and_acceleration / the_trajectory_current_time_ns;
 				break;
+			case 22:
+				value = power;
+				break;
 
 			default:
 				break;
@@ -5962,7 +5987,8 @@
 
 			if (i_crd_type == crd_type)
 			{
-				fn_value(plot, loop, value);
+				if (22 != crd_type || 0 != loop)
+					fn_value(plot, loop, value);
 			}
 
 			values.push_back(value);
@@ -5976,6 +6002,7 @@
 		previouse_coordinate   = coordinate;
 		previouse_velocity     = velocity;
 		previouse_acceleration = acceleration;
+		previouse_cumsum_work  = cumsum_work;
 
 		if (0 == loop)
 		{

